name: .NET Core

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  NUGET_XMLDOC_MODE: skip

jobs:
  
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Cache dotnet tools
        id: cache-dotnet-tools
        uses: actions/cache@v3
        with:
          path: ~/.dotnet/tools
          key: ${{ runner.os }}-dotnet-tools
      
      - name: Install dotnet tools
        if: steps.cache-dotnet-tools.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          dotnet tool update --global dotnet-sonarscanner
      
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
      
      - name: Cache NuGet-Packages
        id: cache-nuget-packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

#      - name: Restore Packages
#        if: steps.cache-nuget-packages.outputs.cache-hit != 'true'
#        run: dotnet restore
        
      - name: Build
        run: dotnet build -c release -p:ContinuousIntegrationBuild=true
      
      - name: Test and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          $file = "Extensions.Dictionary\bin\Release\netstandard2.0\Extensions.Dictionary.dll"
          $version = (Get-Command ([System.IO.Path]::Combine($pwd.Path, $file))).Version.ToString(3)
          
          dotnet sonarscanner begin /k:"SiberaIndustries_Extensions.Dictionary" /o:"siberaindustries" /d:sonar.host.url="https://sonarcloud.io" /v:"$version" /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          dotnet test -c release --no-restore --collect "XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Create NuGet package
        run: dotnet pack -o . -c release --no-restore --no-build

      - name: Upload NuGet-Package
        uses: actions/upload-artifact@v3
        with:
          name: NuGet-Packages
          path: ./*.nupkg
