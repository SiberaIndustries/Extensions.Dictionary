// <auto-generated>
using System.Numerics;
using System.Runtime.Serialization;

namespace Extensions.Dictionary.Tests
{
    [DataContract]
    public class DictionaryDummy : IEquatable<DictionaryDummy>
    {
        public string String01 { get; set; } = nameof(String01); // Public property

        public string String02 { get; protected set; } = nameof(String02); // Protected setter property

        public string String03 { get; private set; } = nameof(String03); // Private setter property

        [Newtonsoft.Json.JsonProperty(PropertyName = "Custom" + nameof(String04))]
        [DataMember(Name = "Custom" + nameof(String04), EmitDefaultValue = true)]
        public string String04 { get; set; } = nameof(String04); // Renamed property

        [Newtonsoft.Json.JsonIgnore]
        [IgnoreDataMember]
        public string String05 { get; set; } = nameof(String05); // Ignored property

        public string String06 = nameof(String06); // Public field

        public static string String07 = nameof(String07); // Public static field

        [Newtonsoft.Json.JsonIgnore]
        // Invalid: [System.Text.Json.Serialization.JsonIgnore]
        [IgnoreDataMember]
        public string String08 = nameof(String08); // Ignored field

        public IDictionary<string, object> Dict1 { get; private set; } = new Dictionary<string, object>
        {
            { "val1", 1 },
            { "val2", "2" }
        };

        public IDictionary<string, int> Dict2 { get; private set; } = new Dictionary<string, int>
        {
            { "val1", 1 },
            { "val2", 2 }
        };

        public IEnumerable<int> Col1 { get; private set; } = new List<int> { 1, 2 };

        public IList<object> Col2 { get; private set; } = new List<object> { 1, 2, "3" };

        public Vector3 Vec3 { get; set; } = new Vector3(1f, 2f, 3f);

        public float Item { get; set; } = 42;
        //public float this[bool index] => 42;

        public override int GetHashCode()
        {
            throw new NotImplementedException();
        }

        public override bool Equals(object obj) =>
            Equals(obj as DictionaryDummy);

        public bool Equals(DictionaryDummy other)
        {
            return other != null
                && String01 == other.String01
                && String02 == other.String02
                && String03 == other.String03
                && String04 == other.String04
                && String05 == other.String05
                && String06 == other.String06

                && String08 == other.String08

                && new DictionaryComparer<string, object>().Equals(Dict1, other.Dict1)
                && new DictionaryComparer<string, int>().Equals(Dict2, other.Dict2)
                && Enumerable.SequenceEqual(Col1, other.Col1)
                && Enumerable.SequenceEqual(Col2, other.Col2)
                && Vec3.Equals(other.Vec3);
        }
    }
}
